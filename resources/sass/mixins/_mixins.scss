@mixin mainBox($direction: row, $justify: flex-start, $align: center) {
  display: flex;
  flex-direction: $direction;

  justify-content: $justify;
  justify-items: center;
  justify-self: center;

  align-content: center;
  align-items: $align;
  align-self: center;

  // Developer mode:
  border: 0.5px solid darkmagenta;
}

@mixin paddingMargin($padding: 0, $margin: 0) {
  padding: $padding;
  margin: $margin;
}

@mixin style($color: $neutral_lighter, $background-color: transparent) {
  color: $color;
  background-color: $background-color;

}

/** 
* Must be the last line in all call to this mixin!
*/
@mixin hover($background: transparent,
  $color: inherit,
  $borderColor: transparent,
  $preBorderColor: transparent) {
  border: 1px solid $preBorderColor;

  &:hover {
    @include style($color, $background);
    border: 1px solid $borderColor;
  }
}

@mixin button($background: transparent,
  $color: inherit,
  $borderColor: transparent,
  $paddingSize: $padding,
  $marginSize: 0) {
  @include style($color, $background);
  @include paddingMargin($paddingSize, $marginSize);
  border: 1px solid $borderColor;
}

/**
 * checkUnit Function
 *
 * This function checks if a value has one of the specified units: px, em, rem, or %.This function checks if a value has one of the specified units: px, em, rem, vw, vh or %.
 *
 * @param {any} $value - Value to check.
 * @return {boolean} - Returns true if it has a valid unit, otherwise, false.
 */
@function checkUnit($value) {
  @if $value ==null {
    @return true;
  }

  @if type-of($value)=="number" {
    $value: $value + "";
  }

  @return type-of($value)=="string" and str-slice($value, -1)=="%" or str-slice($value, -2)=="px" or str-slice($value, -2)=="em" or str-slice($value, -2)=="vw" or str-slice($value, -2)=="vh" or str-slice($value, -3)=="rem";
}

/**
 * boxSize Mixin
 *
 * This mixin allows setting the size properties of an element as well as its minimum and maximum properties.
 *
 * @param {string} $type - Size type ("width" or "height").
 * @param {string} $min - Minimum size (optional).
 * @param {string} $size - Main size (optional).
 * @param {string} $max - Maximum size (optional).
 */
@mixin boxSize($type: width, $min: null, $size: null, $max: null) {
  @if $type =="width" {
    min-width: if(checkUnit($min), $min, $min + vw);
    width: if(checkUnit($size), $size, $size + vw);
    max-width: if(checkUnit($max), $max, $max + vw);
  }

  @else if $type =="height" {
    min-height: if(checkUnit($min), $min, $min + vh);
    height: if(checkUnit($size), $size, $size + vh);
    max-height: if(checkUnit($max), $max, $max + vh);
  }

  @else {
    @warn "The first value must be only [width,height,null], please check the parameters!";
  }
}

@mixin boxShadow($boderColor: transparent,
  $radius: 0,
  $axis: 3px,
  $shadowColor: $neutral_main,
  $shadowColorSecondary: $neutral_light) {

  border-radius: $radius;
  border: 1px solid $boderColor;
  box-shadow:
    $axis $axis (
    $axis * 2) $shadowColor,
    (-$axis) (-$axis) ($axis * 2) $shadowColorSecondary;
}